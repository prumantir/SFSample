@using SFSample
@{
    ViewBag.Title = "Ribbon";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Ribbon</h2>
<div id = "ControlRegion">
@using Syncfusion.JavaScript.Models;
 @(Html.EJ().Ribbon("defaultRibbon")
     .Width("600px")
     .ApplicationTab(apptab =>
    {
        apptab.Type(ApplicationTabType.Menu).MenuItemID("menurib").MenuSettings(new MenuProperties()
               {
                   OpenOnClick = false
               });
    })
    .RibbonTabs(tab =>
    {
        tab.Id("home").Text("HOME").TabGroups(tabgrp =>
        {
            tabgrp.Text("New").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("new").Text("New").ToolTip("New").ButtonSettings(new ButtonProperties()
                        {
                            ContentType = ContentType.ImageOnly,
                            ImagePosition = ImagePosition.ImageTop,
                            PrefixIcon = "e-icon e-ribbon e-new",
                            Click= "executeAction"
                        }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("60px").Height("70px")).Add();
            }).Add();
            tabgrp.Text("Clipboard").AlignType(RibbonAlignType.Columns).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("paste").Text("Paste").ToolTip("Paste").SplitButtonSettings(new SplitButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-ribbonpaste",
                        TargetID="pasteSplit",
                        ArrowPosition=ArrowPosition.Bottom,
                        ButtonMode = ButtonMode.Dropdown,
                        Click = "executeAction"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.SplitButton).Width("50px").Height("70px")).Add();
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("cut").Text("Cut").ToolTip("Cut").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        PrefixIcon = "e-icon e-ribbon e-ribboncut",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("copy").Text("Copy").ToolTip("Copy").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        PrefixIcon = "e-icon e-ribbon e-ribboncopy",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("clear").Text("Clear").ToolTip("Clear All").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        PrefixIcon = "e-icon e-ribbon clearAll",
                        Click = "executeAction"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("60px").IsBig(false)).Add();
            }).Add();
            tabgrp.Text("Font").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("fontfamily").ToolTip("Font").DropdownSettings(new DropDownListProperties()
                    {
                        DataSource = (IEnumerable<object>)ViewBag.datasource,
                        Text = "Segoe UI",
                        Select = "executeAction",
                        Width = "150px"
                    }).Add();
                    cntgrp.Id("fontsize").ToolTip("FontSize").DropdownSettings(new DropDownListProperties()
                    {
                        DataSource = (IEnumerable<object>)ViewBag.datasource1,
                        Text = "1pt",
                        Select = "executeAction",
                        Width = "65px"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.DropDownList).Height("28px")).Add();
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("bold").ToolTip("Bold").Type(RibbonButtonType.ToggleButton).ToggleButtonSettings(new ToggleButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        DefaultText="Bold",
                        ActiveText="Bold",
                        DefaultPrefixIcon = "e-icon e-ribbon bold",
                        ActivePrefixIcon = "e-icon e-ribbon bold",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("italic").ToolTip("Italic").Type(RibbonButtonType.ToggleButton).ToggleButtonSettings(new ToggleButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        DefaultText = "Italic",
                        ActiveText = "Italic",
                        DefaultPrefixIcon = "e-icon e-ribbon e-ribbonitalic",
                        ActivePrefixIcon = "e-icon e-ribbon e-ribbonitalic",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("underline").ToolTip("Underline").Type(RibbonButtonType.ToggleButton).ToggleButtonSettings(new ToggleButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        DefaultText = "Underline",
                        ActiveText = "Underline",
                        DefaultPrefixIcon = "e-icon e-ribbon e-ribbonunderline",
                        ActivePrefixIcon = "e-icon e-ribbon e-ribbonunderline",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("strikethrough").ToolTip("Strikethrough").Type(RibbonButtonType.ToggleButton).ToggleButtonSettings(new ToggleButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        DefaultText = "Strikethrough",
                        ActiveText = "Strikethrough",
                        DefaultPrefixIcon = "e-icon e-ribbon strikethrough",
                        ActivePrefixIcon = "e-icon e-ribbon strikethrough",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("superscript").Text("Superscript").ToolTip("Superscript").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-superscripticon",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("subscript").Text("Subscript").ToolTip("Subscript").EnableSeparator(true).ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-subscripticon",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("fontcolor").Text("Font Color").ToolTip("Font Color").Type(RibbonButtonType.Custom).ContentID("fontcolor").Add();
                    cntgrp.Id("fillcolor").Text("Fill Color").ToolTip("Fill Color").Type(RibbonButtonType.Custom).ContentID("fillcolor").Add();
                }).ContentDefaults(df => df.IsBig(false)).Add();
            }).Add();
        }).Add();
        tab.Id("insert").Text("INSERT").TabGroups(tabgrp =>
        {
            tabgrp.Text("Tables").AlignType(RibbonAlignType.Columns).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("tables").Text("Tables").ToolTip("Tables").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-table",
                        Click = "executeAction"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("50px").Height("70px")).Add();
            }).Add();
            tabgrp.Text("Illustrations").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("pictures").Text("Pictures").ToolTip("Pictures").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-picture",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("videos").Text("Videos").ToolTip("Videos").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-video",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("shapes").Text("Shapes").ToolTip("Shapes").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-shape",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("charts").Text("Charts").ToolTip("Charts").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-chart",
                        Click = "executeAction"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("50px").Height("70px")).Add();
            }).Add();
            tabgrp.Text("Comments").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("comments").Text("Comments").ToolTip("Comments").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-comment",
                        Click = "executeAction"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("70px").Height("70px")).Add();
            }).Add();
        }).Add();
        })
        .ClientSideEvents(evt=>evt.Create("createControl"))
    )
                    <div id="contenteditor" class="e-contenteditor" contenteditable="true" spellcheck="false">
                        <p>Integer dui elit, cursus vel metus maximus, dictum semper magna. Donec volutpat porta gravida. Fusce dapibus cursus tellus et pulvinar. Fusce porta dolor eget consectetur ultricies.</p>
                        <p>Cras et quam scelerisque, blandit lorem a, tristique velit. Quisque sagittis sapien augue. Quisque tincidunt sit amet libero sed luctus.</p>
                    </div>
                <ul id="menurib">
                    <li><a>FILE</a>
                        <ul>
                            <li><a>New</a></li>
                            <li><a>Open</a></li>
                            <li><a>Save</a></li>
                            <li><a>Save As</a></li>
                            <li><a>Print</a></li>
                        </ul>
                    </li>
                </ul>
            <ul id="pasteSplit">
               <li><a>Paste</a></li>
            </ul>
           <input id="fontcolor"/>
           <input id="fillcolor"/>
<script>
        var fontfamily = ["Segoe UI", "Arial", "Times New Roman", "Tahoma", "Helvetica"], fontsize = ["1pt", "2pt", "3pt", "4pt", "5pt"], action1 = ["New", "Clear"], action2 = ["Bold", "Italic", "Underline", "strikethrough", "superscript", "subscript"];
        function executeAction(args) {
            var val, prop = args.text;
            val = (ej.isNullOrUndefined(args.model.text)) ? args.model.activeText : args.model.text;
            if (action1.indexOf(val) != -1)
                $("#contenteditor").empty();
            else if (action2.indexOf(val) != -1)
                document.execCommand(val, false, null);
            else if (fontfamily.indexOf(prop) != -1)
                document.execCommand("FontName", false, prop);
            else if (fontsize.indexOf(prop) != -1)
                document.execCommand("FontSize", false, prop.replace("pt", ""));
            else
                $("#contenteditor").append("<p> Action: " + val + " Triggered </p>");
        }
        function createControl(args) {
            var ribbon = $("#defaultRibbon").data("ejRibbon");
            $("#fontcolor").ejColorPicker({ value: "#FFFF00", modelType: "palette", cssClass: "e-ribbon", toolIcon: "e-fontcoloricon", select: "colorHandler" });
            $("#fillcolor").ejColorPicker({ value: "#FF0000", modelType: "palette", cssClass: "e-ribbon", toolIcon: "e-fillcoloricon", select: "colorHandler" });
        }
        function colorHandler(args) {
            (this._id.indexOf("fillcolor") != -1) ? $("#contenteditor").css('background-color', args.value) : document.execCommand('forecolor', false, args.value);
        }
    </script>
     <link href="@Url.Content("~/Content/ej/web/ribbon-css/ej.icons.css")" rel="stylesheet" />
    <style>
        .e-contenteditor {
            width:600px;
            height: 220px;
            border: 1px solid #D9DFDE;
            border-top: 0;
            overflow: auto;
            background-color:white;
        }
            .e-contenteditor p {
                margin: 20px;
            }
        .e-ribbon .e-header .e-tab:not(.e-active) a:hover {
            background:#FFF;
        }
    </style> 
</div>
